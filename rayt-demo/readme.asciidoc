== Game Client

Create a namespace
----
kubectl create namespace game
kubectl config set-context --current --namespace=game
----

Build game client in its webserver
----
cd balloon-game-mobile

# modify game.service.ts to map to the correct backend websocket

npm run build

CLIENT_IMG_VER=aws-1.0.0

docker build  \
-f Dockerfile \
-t dev.local/burrsutter/balloon-game-client:$CLIENT_IMG_VER \
.

docker login quay.io

docker tag dev.local/burrsutter/balloon-game-client:$CLIENT_IMG_VER quay.io/burrsutter/balloon-game-client:$CLIENT_IMG_VER

docker push quay.io/burrsutter/balloon-game-client:$CLIENT_IMG_VER

----

Deploy game client
----
# modify deployment.yaml to point to correct image tag
kubectl apply -f gameclient-deployment.yaml
kubectl apply -f gameclient-service.yaml
----

== Game Server

Build JVM-version of Game Server
----
cd balloon-game-server

mvn clean compile package

GS_IMG_VER=1.0.2

docker build  \
-f src/main/docker/Dockerfile.jvm \
-t dev.local/burrsutter/balloon-game-server-jvm:$GS_IMG_VER \
.

docker login quay.io

docker tag dev.local/burrsutter/balloon-game-server-jvm:$GS_IMG_VER quay.io/burrsutter/balloon-game-server-jvm:$GS_IMG_VER

docker push quay.io/burrsutter/balloon-game-server-jvm:$GS_IMG_VER

----

Create Public Key Secret

[source,bash]
----
cd balloon-game-server
./bin/genPrivateKey.sh
./bin/genPublicKey.sh
./bin/toPkcs8.sh
----
The result will be 3 files in the balloon-game-server directory:

----
privkey.pem
publickey
privkey
----

----
kubectl create secret generic jwt-public-key --from-file=publicKey
----

Generate the JWT
----
mvn exec:java -Dexec.mainClass=com.redhat.developer.balloon.GenerateJwtToken -Dexec.classpathScope=test -Dexec.args="/Users/burrsutter/projects/quarkus-balloons/balloon-game-server/privkey 3600"
----

Copy output to env variable:
----
export JWT_TOKEN=<generated token>
----

Deploy JVM-based Game Server
----
kubectl apply -f gameserver-deployment.yaml
kubectl apply -f gameserver-service.yaml
----

Create a Public Route to Game Client and Server
----
# using the OpenShift built-in Router
oc expose service gameclient
oc expose service gameserver
----

----
kubectl get routes
NAME          HOST/PORT                                  PATH   SERVICES     PORT   TERMINATION   WILDCARD
game-client   game-client-game.apps.aws.burrsutter.org          gameclient   http   edge/Allow    None
gameserver    gameserver-game.apps.aws.burrsutter.org           gameserver   http   edge/Allow    None
----

----
curl -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.aws.burrsutter.org/a/start
curl -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.aws.burrsutter.org/a/play
curl -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.aws.burrsutter.org/a/easy
curl -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.aws.burrsutter.org/a/gameover
----


== Config Service

----
cd configuration-service-q

mvn clean compile package

CS_IMG_VER=1.0.1

docker build  \
-f src/main/docker/Dockerfile.jvm \
-t dev.local/burrsutter/configuration-service-q-jvm:$CS_IMG_VER \
.

docker login quay.io

docker tag dev.local/burrsutter/configuration-service-q-jvm:$CS_IMG_VER quay.io/burrsutter/configuration-service-q-jvm:$CS_IMG_VER

docker push quay.io/burrsutter/configuration-service-q-jvm:$CS_IMG_VER

----

Deploy JVM-based Quarkus Config Service
----
kubectl apply -f configuration-deployment.yaml
kubectl apply -f configuration-service.yaml
----


==== Optional
Deploy Strimzi
----
curl -L https://github.com/strimzi/strimzi-kafka-operator/releases/download/0.16.2/strimzi-cluster-operator-0.16.2.yaml \
  | sed 's/namespace: .*/namespace: game/' \
  | kubectl apply -f - -n game
----

and wait for the Operator
----
kubectl get pods -n game

NAME                                        READY   STATUS    RESTARTS   AGE
strimzi-cluster-operator-77555d4b69-hhxm9   1/1     Running   0          103s
----

Deploy a Kafka Cluster
----
cat <<EOF | kubectl apply -f -
apiVersion: kafka.strimzi.io/v1alpha1
kind: Kafka
metadata: 
  name: my-cluster
spec:
  kafka:
    replicas: 3
    listeners:
      external:
        type: route
    storage:
      type: ephemeral
  zookeeper:
    replicas: 3
    storage:
      type: ephemeral
  entityOperator:
    topicOperator: {}
    userOperator: {}
EOF
----

or

kubectl -n game apply -f "https://raw.githubusercontent.com/strimzi/strimzi-kafka-operator/0.16.2/examples/kafka/kafka-persistent-single.yaml"