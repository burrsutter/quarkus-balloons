== Game Client

Create a namespace
----
kubectl create namespace game
kubectl config set-context --current --namespace=game
----

Build game client in its webserver
----
cd balloon-game-mobile

# modify game.service.ts to map to the correct backend websocket

npm run build

CLIENT_IMG_VER=aws-1.0.2
# OR
CLIENT_IMG_VER=gcp-1.0.2
# OR
CLIENT_IMG_VER=azr-1.0.2
# OR
CLIENT_IMG_VER=1.0.3

docker build  \
-f Dockerfile \
-t dev.local/burrsutter/balloon-game-client:$CLIENT_IMG_VER \
.

docker login quay.io

docker tag dev.local/burrsutter/balloon-game-client:$CLIENT_IMG_VER quay.io/burrsutter/balloon-game-client:$CLIENT_IMG_VER

docker push quay.io/burrsutter/balloon-game-client:$CLIENT_IMG_VER

----

Deploy game client
----
# modify deployment.yaml to point to correct image tag
kubectl apply -f gameclient-deployment.yaml
kubectl apply -f gameclient-service.yaml
----

== Game Server

Build JVM-version of Game Server
----
cd balloon-game-server

mvn clean compile package

GS_IMG_VER=1.0.5

docker build  \
-f src/main/docker/Dockerfile.jvm \
-t dev.local/burrsutter/balloon-game-server-jvm:$GS_IMG_VER \
.

docker login quay.io

docker tag dev.local/burrsutter/balloon-game-server-jvm:$GS_IMG_VER quay.io/burrsutter/balloon-game-server-jvm:$GS_IMG_VER

docker push quay.io/burrsutter/balloon-game-server-jvm:$GS_IMG_VER

----

Create Public Key Secret

[source,bash]
----
cd balloon-game-server
./bin/1_genPrivateKey.sh
./bin/2_genPublicKey.sh
./bin/3_toPkcs8.sh
----
The result will be 3 files in the balloon-game-server directory:

----
privkey.pem
publickey
privkey
----

Add the key to OpenShift/Kubernetes
----
kubectl create secret generic jwt-public-key --from-file=publicKey
----

Generate the JWT
----
./bin/5_createJWT.sh
----

Copy output to env variable:
----
export JWT_TOKEN=<generated token>
----

Deploy JVM-based Game Server
----
kubectl apply -f gameserver-deployment.yaml
kubectl apply -f gameserver-service.yaml
----

Create a AWS Public Route to Game Client and Server
----
kubectl apply -f gameclient-route.yaml
kubectl apply -f gameserver-route.yaml
----

OR Create a GCP Public Route to Game Client and Server
----
kubectl apply -f gameclient-route-gcp.yaml
kubectl apply -f gameserver-route-gcp.yaml
----

OR Create a AZR Public Route to Game Client and Server
----
kubectl apply -f gameclient-route-azr.yaml
kubectl apply -f gameserver-route-azr.yaml
----


----
kubectl get routes
NAME          HOST/PORT                                  PATH   SERVICES     PORT   TERMINATION   WILDCARD
game-client   game-client-game.apps.aws.burrsutter.org          gameclient   http   edge/Allow    None
gameserver    gameserver-game.apps.aws.burrsutter.org           gameserver   http   edge/Allow    None
----

----
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.aws.burrsutter.org/a/start
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.aws.burrsutter.org/a/play
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.aws.burrsutter.org/a/pause
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.aws.burrsutter.org/a/easy
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.aws.burrsutter.org/a/gameover
----

----
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.gcp.burrsutter.dev/a/start
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.gcp.burrsutter.dev/a/play
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.gcp.burrsutter.dev/a/pause
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.gcp.burrsutter.dev/a/easy
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.gcp.burrsutter.dev/a/gameover
----

----
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.azr.burrsutter.net/a/start
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.azr.burrsutter.net/a/play
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.gcp.burrsutter.dev/a/pause
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.gcp.burrsutter.dev/a/easy
curl -v -H "Authorization: Bearer $JWT_TOKEN" gameserver-game.apps.gcp.burrsutter.dev/a/gameover
----


== Config Service Default Vanilla Deployment
----
cd configuration-service-default

mvn clean compile package

CS_IMG_VER=1.0.4

docker build  \
-f src/main/docker/Dockerfile.jvm \
-t dev.local/burrsutter/configuration-service-default:$CS_IMG_VER \
.

docker login quay.io

docker tag dev.local/burrsutter/configuration-service-default:$CS_IMG_VER quay.io/burrsutter/configuration-service-default:$CS_IMG_VER

docker push quay.io/burrsutter/configuration-service-default:$CS_IMG_VER

----

Deploy Default Config Service
----
kubectl apply -f configuration-deployment-default.yaml
kubectl apply -f configuration-service.yaml
----


== Config Service Quarkus Vanilla Deployment

----
cd configuration-service-q

mvn clean compile package

CS_IMG_VER=1.0.4

docker build  \
-f src/main/docker/Dockerfile.jvm \
-t dev.local/burrsutter/configuration-service-q-jvm:$CS_IMG_VER \
.

docker login quay.io

docker tag dev.local/burrsutter/configuration-service-q-jvm:$CS_IMG_VER quay.io/burrsutter/configuration-service-q-jvm:$CS_IMG_VER

docker push quay.io/burrsutter/configuration-service-q-jvm:$CS_IMG_VER

----

Deploy JVM-based Quarkus Config Service
----
kubectl apply -f configuration-deployment-q.yaml
kubectl apply -f configuration-service.yaml
----

== Config Service Spring Boot Vanilla Deployment
----
cd configuration-service-sb

mvn clean compile package

# edit pom.xml for version numbers

mvn compile jib:build

kubectl apply -f configuration-deployment-sb.yaml

----

== Optional

=== Knative Serving for Config

----
https://github.com/redhat-developer-demos/guru-night
cd guru-night
export CLOUD_PROFILE=AWS
cp setenv.sh setenv-AWS.sh
#  edit setenv-AWS.sh's KUBECONFIG setting
./workshopper installCatalogSources
./workshopper installKnativeServing

watch kubectl get pods -n knative-serving
----

Config Services Knative Serving 
----
# default config
kubectl apply -f configuration-kn-default-traffic.yaml

# now make it always Quarkus Burr
kubectl apply -f configuration-kn-q-traffic.yaml

# when make it always SB Ray
kubectl apply -f configuration-kn-sb-traffic.yaml

# back to default
kubectl apply -f configuration-kn-default-traffic.yaml

# a lot of Ray, wee bit of Burr
kubectl apply -f configuration-kn-split-traffic.yaml
----


=== Kafka for Bonus/Achievement
Deploy Strimzi
----
kubectl create namespace bonus

curl -L https://github.com/strimzi/strimzi-kafka-operator/releases/download/0.16.2/strimzi-cluster-operator-0.16.2.yaml \
  | sed 's/namespace: .*/namespace: bonus/' \
  | kubectl apply -f - -n bonus
----

and wait for the Operator
----
kubectl get pods -n bonus

NAME                                        READY   STATUS    RESTARTS   AGE
strimzi-cluster-operator-77555d4b69-hhxm9   1/1     Running   0          103s
----

Deploy a Kafka Cluster
----
cat <<EOF | kubectl -n bonus apply -f -
apiVersion: kafka.strimzi.io/v1alpha1
kind: Kafka
metadata: 
  name: my-cluster
spec:
  kafka:
    replicas: 3
    listeners:
      external:
        type: route
    storage:
      type: ephemeral
  zookeeper:
    replicas: 3
    storage:
      type: ephemeral
  entityOperator:
    topicOperator: {}
    userOperator: {}
EOF
----

or

kubectl -n bonus apply -f "https://raw.githubusercontent.com/strimzi/strimzi-kafka-operator/0.16.2/examples/kafka/kafka-persistent-single.yaml"

or

----
cat <<EOF | kubectl -n bonus apply -f -
apiVersion: kafka.strimzi.io/v1alpha1
kind: Kafka
metadata: 
  name: my-cluster
spec:
  kafka:
    replicas: 3
    listeners:
      external:
        type: route
    storage:
      type: ephemeral
  zookeeper:
    replicas: 3
    storage:
      type: persistent-claim
      size: 100Gi
      deleteClaim: true
  entityOperator:
    topicOperator: {}
    userOperator: {}
EOF
----

=== Knative Eventing & Knative Kafka

----
./workshopper installKnativeEventing

watch kubectl get pods -n knativeeventing
----


----
./workshopper installKnativeKafka
----